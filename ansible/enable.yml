- name: Get to know the servers a bit and make sure some basic things are in order
  hosts: "{{ hosts | default('all') }}"
  tasks:

    - name: Temporary hack to distinguish openSuse from Suse, due to a bug in ansible setup module
      shell: grep -i opensuse /etc/SuSE-release || grep -i opensuse /etc/os-release
      changed_when: false
      failed_when: false
      register: grep_opensuse
      when: ansible_distribution == 'Suse'
    - name: Change discovered distro from Suse to openSuse
      set_fact:
        ansible_distribution: Opensuse
      when: ansible_distribution == 'Suse' and grep_opensuse.rc == 0

    - name: Discover OS
      debug:
        msg: "Distro: {{ ansible_distribution }}. Family: {{ ansible_os_family }}. PkgMgr: {{ ansible_pkg_mgr }}"

    - name: Check support for OS family
      fail: msg="Distro {{ ansible_distribution }} not supported, please open a support ticket in https://github.com/mistio/deploy_collectd"
      when: ansible_os_family not in ['Debian', 'RedHat', 'Suse', 'FreeBSD', 'Archlinux']

    - name: Group servers per OS to apply OS specific steps
      group_by: key={{ ansible_distribution }}

    - name: Group servers per OS family to apply OS family specific steps
      group_by: key={{ ansible_os_family }}_based


- name: Install CollectD for Debian based distros
  hosts: Debian_based
  gather_facts: no
  sudo: yes
  tasks:

    - name: This playbook has only been tested with Debian and Ubuntu
      debug:
        msg: "Not sure if {{ ansible_distribution }} is supported, will try and hope for the best."
      when: ansible_distribution not in ['Debian', 'Ubuntu']

    - name: Make sure hostname is registered in /etc/hosts
      command: grep -w {{ ansible_hostname }} /etc/hosts
      register: grep_hosts
      changed_when: false
      failed_when: false

    - name: "WARNING: hostname not in /etc/hosts, adding temporarily (so that apt-get install won't break in post installation due to FQDNLookup=True)"
      lineinfile:
        line: "127.0.0.1 {{ ansible_hostname }}"
        dest: /etc/hosts
        insertafter: EOF
        state: present
      when: grep_hosts.rc == 1
      notify: Remove localhost from /etc/hosts

    - name: Check if /etc/init.d/collectd exists
      stat: path=/etc/init.d/collectd
      register: st

    - name: Update package list
      apt:
        update_cache: yes
        cache_valid_time: 3600
      ignore_errors: yes
      register: apt_res

    - name: Take a nap
      command: sleep 120
      when: apt_res | failed

    - name: apt-get -f install
      command: apt-get -f -y install
      ignore_errors: yes
      when: apt_res | failed

    - name: Update package list
      apt:
        update_cache: yes
        cache_valid_time: 3600
      ignore_errors: yes
      when: apt_res | failed

    - name: Install collectd
      apt:
        pkg: collectd
        state: present

    - name: Stop collectd system service, if it wasn't previously running
      service:
        name: collectd
        state: stopped
        # enabled: no
      when: not st.stat.exists  # => collectd wasn't previously installed

    - name: Disable collectd system service, if it wasn't previously running
      lineinfile:
        regexp: ^DISABLE=
        line: DISABLE=1
        dest: /etc/default/collectd
      when: not st.stat.exists  # => collectd wasn't previously installed

  handlers:

    - name: Remove localhost from /etc/hosts
      lineinfile:
        line: "127.0.0.1 {{ ansible_hostname }}"
        dest: /etc/hosts
        state: absent


- name: Install CollectD for Fedora
  hosts: Fedora
  gather_facts: no
  sudo: yes
  tasks:
    - name: Install collectd
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - collectd
        - collectd-ping


- name: Install CollectD for RedHat based distros (excluding Fedora)
  hosts: RedHat_based:!Fedora
  gather_facts: no
  sudo: yes
  tasks:

    - name: This playbook has only been tested with CentOS, RHEL, Amazon
      debug:
        msg: "Not sure if {{ ansible_distribution }} is supported, will try and hope for the best."
      when: ansible_distribution not in ['CentOS', 'RedHat', 'Amazon']

    - name: Check if /etc/yum.repos.d/epel.repo exists
      stat: path=/etc/yum.repos.d/epel.repo
      register: st

    - name: File /etc/yum.repos.d/epel.repo missing, check if epel-release package is available
      command: yum list epel-release
      failed_when: false
      changed_when: false
      register: list_epel_release
      when: not st.stat.exists

    - name: Install epel-release if /etc/yum.repos.d/epel.repo missing and epel-release package available
      yum:
        name: epel-release
        state: present
      when: not st.stat.exists and list_epel_release.rc == 0
      notify: Disable epel repo if it was initially disabled

    - name: Add epel repo manually if /etc/yum.repos.d/epel.repo missing and epel-release package not available (no gpg checks)
      template:
        src: templates/epel.repo.j2
        dest: /etc/yum.repos.d/epel.repo
      when: not st.stat.exists and list_epel_release.rc != 0
      notify: Remove epel repo if manually added

    - name: Install collectd from epel repo
      yum:
        name: collectd
        state: present
        enablerepo: epel

    - name: Install collectd ping plugin from epel repo
      yum:
        name: collectd-ping
        state: present
        enablerepo: epel
      ignore_errors: yes

    - name: Install libselinux-python if missing in case the machine has SELinux
      yum:
        name: libselinux-python
        state: present

  handlers:

    - name: Disable epel repo if it was initially disabled
      ini_file:
        dest: /etc/yum.repos.d/epel.repo
        section: epel
        option: enabled
        value: 0

    - name: Remove epel repo if manually added
      file:
        dest: /etc/yum.repos.d/epel.repo
        state: absent


- name: Install CollectD for Suse based repos
  hosts: Suse_based
  gather_facts: no
  sudo: yes
  tasks:

    - name: "Only openSuSE has collectd in main repos, adding YaST:Web/SLE_11_SP3"
      zypper_repository:
        repo: "http://download.opensuse.org/repositories/YaST:Web/SLE_11_SP3/YaST:Web.repo"
        state: present
      when: ansible_distribution != 'Opensuse'

    - name: Import repo gpg key
      rpm_key:
        key: "http://download.opensuse.org/repositories/YaST:/Web/SLE_11_SP3/repodata/repomd.xml.key"  # check out https://github.com/ansible/ansible-modules-extras/issues/65
        state: present
      when: ansible_distribution != 'Opensuse'

    - name: Install collectd from the repo
      zypper:
        name: collectd
        state: present

    - name: Install collectd-plugin-python from the repo
      zypper:
        name: collectd-plugin-python
        state: present


- name: Install CollectD for FreeBSD
  hosts: FreeBSD
  gather_facts: no
  sudo: yes
  tasks:

    - name: Install bash and portmaster
      # using command because pkgng module breaks if pkg needs to be updated
      command: pkg install -y bash portmaster

    - name: Create /var/db/ports/net-mgmt_collectd5/ directory
      file:
        path: /var/db/ports/net-mgmt_collectd5
        state: directory

    - name: Copy options file for installation
      copy:
        src: files/freebsd_options
        dest: /var/db/ports/net-mgmt_collectd5/options

    - name: Install collectd with portmaster
      shell: "portmaster -G -w --no-confirm -y -d -mBATCH=yes < /dev/null /usr/ports/net-mgmt/collectd5"


- name: Install CollectD for Archlinux
  hosts: Archlinux
  vars:
    ansible_python_interpreter: /usr/bin/python2
  gather_facts: no
  sudo: yes
  tasks:
    - name: Install collectd
      pacman:
        name: "{{ item }}"
        state: present
      with_items:
        - collectd


- name: Configure and start collectd
  hosts: "{{ hosts | default('all') }}"
  gather_facts: no
  sudo: yes
  vars:
    monitor: monitor1.mist.io
  tasks:

    - name: Create /opt/mistio-collectd/ directory
      file:
        path: /opt/mistio-collectd
        state: directory

    - name: Store deploy_collectd playbook version (to be able to properly disable monitoring in the future)
      copy:
        src: files/version
        dest: /opt/mistio-collectd/version

    - name: Generate collectd config file
      template:
        src: templates/collectd.conf.j2
        dest: /opt/mistio-collectd/collectd.conf

    - name: Generate collectd init script
      template:
        src: templates/collectd.sh.j2
        dest: /opt/mistio-collectd/collectd.sh
        mode: 0755

    - name: Generate mistio-collectd uuid file
      copy:
        content: "{{ uuid }}"
        dest: /opt/mistio-collectd/uuid

    - name: Try to kill any running mist.io collectd's (if this isn't the first installation)
      shell: /opt/mistio-collectd/collectd.sh stop
      ignore_errors: yes

    - name: Start collectd
      shell: /opt/mistio-collectd/collectd.sh start

    - name: Check if /etc/cron.d/ exists
      stat: path=/etc/cron.d
      register: cron_d

    - name: Check if /etc/crontab exists
      stat: path=/etc/crontab
      register: crontab
      when: not cron_d.stat.exists

    - name: Remove previous /etc/cron.d/mistio-collectd file if present
      file:
        path: /etc/cron.d/mistio-collectd
        state: absent
      when: cron_d.stat.exists
      ignore_errors: yes

    - name: Set up /etc/cron.d/mistio-collectd entry to restart mistio-collectd daily
      cron:
        name: mistio-collectd daily restart to resolve monitor hostname
        user: root
        minute: 0
        hour: 0
        job: /opt/mistio-collectd/collectd.sh restart
        cron_file: mistio-collectd
      when: cron_d.stat.exists

    - name: Set up /etc/cron.d/mistio-collectd entry to start mistio-collectd at reboot
      cron:
        name: mistio-collectd
        user: root
        special_time: reboot
        job: sleep 5; /opt/mistio-collectd/collectd.sh start  # sleep 5 because network isn't always initialized at this point
        cron_file: mistio-collectd
      when: cron_d.stat.exists

    - name: Remove mistio entries from /etc/crontab
      replace:
        dest: /etc/crontab
        regexp: "^.*mistio.*$"
      when: not cron_d.stat.exists and crontab.stat.exists

    - name: Set up /etc/crontab entry to restart mistio-collectd daily (/etc/cron.d/ missing)
      lineinfile:  # ugly hack because the cron module only supports user crontabs and /etc/cron.d/ entries
        line: "0 0 * * *   root /opt/mistio-collectd/collectd.sh restart"
        dest: /etc/crontab
        insertafter: EOF
        state: present
      when: not cron_d.stat.exists and crontab.stat.exists

    - name: Set up /etc/crontab entry to start mistio-collectd at reboot (/etc/cron.d/ missing)
      lineinfile:  # ugly hack because the cron module only supports user crontabs and /etc/cron.d/ entries
        line: "@reboot root sleep 5; /opt/mistio-collectd/collectd.sh start"  # sleep 5 because network isn't always initialized at this point
        dest: /etc/crontab
        insertafter: EOF
        state: present
      when: not cron_d.stat.exists and crontab.stat.exists

    - name: /etc/cron.d/ and /etc/crontab missing
      fail:
        msg: seriously?
      when: not cron_d.stat.exists and not crontab.stat.exists
